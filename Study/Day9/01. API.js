// ✏️ API(Application Programming Interface)
// - 차세대 웹 표준 언어로 등장한 HTML 새 버전(이전의 HTML5)은 기존의 마크업 기능뿐만 아니라 누구나 가져와서 사용할 수 있는 다양한 API를 함께 제공한다.
// - 예) Canvas API
// - HTML에 포함된 API는 자바스크립트를 알면 누구나 쉽게 가져와서 사용할 수 있다.

// 1️⃣ API란?
// - Application Programming Interface
// - 애플리케이션 프로그래밍을 위한 인터페이스
// -> 인터페이스(Interface)
// ----> 2가지 시스템 사이의 경계
// ----> 웹과 사용자 사이, 또는 스마트폰 기기와 사용자 사이에서 사용자를 도와주기 위한 체계
// ----> 예) 사용자 인터페이스(UI; User Interface) : 웹 사이트나 스마트 기기 화면에서 정보를 찾아보기 쉽게 메뉴나 화면 요소를 배치해 놓은 것
// ----> 애플리케이션에서 프로그램을 작성할 때 하나의 프로그램과 다른 프로그램 사이에 쉽게 정보를 주고받을 수 있게 도와 주는 인터페이스

// - API의 예로 Canvas API, 날씨 정보 API 등이 있다.

// 2️⃣ 공개 API(Open API)
// - API 중에서 누구나 사용할 수 있게 만든 것
// - 공개 API를 사용하면 포털 사이트의 지도 기능이나 인증 기능을 자신의 사이트로 가져와서 넣을 수도 있고, 정부에서 제공하는 각종 자료와 기능을 가져와서 사용할 수도 있다.
// -> 예) 네이버/카카오 회원 정보를 사용해서 회원 가입과 로그인을 함께 처리
// - 요즘에는 많은 API가 공개되어 있어서 누구나 무료로 사용할 수 있다.

// 3️⃣ 웹 API
// - HTML의 최신 버전인 HTML5가 처음 발표되었을 때 다양한 API를 제공한다는 사실 때문에 수많은 사람들이 환영했다.
// - HTML에서 제공하는 API를 통틀어 'Web API'라고 하는데, 새로운 API가 계속 추가되고 있다.
// -> https://developer.mozilla.org/ko/docs/Web/API
// - 사용자의 위치를 추적하는 프로그램을 작성하는 중이라면 현재 위치를 알려주는 Geolocation API를 사용할 수 있다.

// 4️⃣ 웹 스토리지 API(Web Storage API)
// - 입력한 내용들을 웹 브라우저 자체에 저장해 두었다가 가져오기 위한 웹 브라우저 저장 공간

// (1) 쿠키와 웹 스토리지
// - 쿠키(Cookie)
// -> 웹 스토리지 API가 등장하기 전부터 웹 브라우저에는 '쿠키'라는 저장 공간이 있어서 인터넷 사용을 위한 정보를 저장하고 있었다.
// -> 쿠키란, 사용자가 웹 사이트에 접속해서 웹 사이트를 서핑하는 동안 사용자 컴퓨터에 저장되는 텍스트 파일을 가리킨다.
// -> 사용자가 사이트에 접속하면 저장해 놓은 쿠키 정보를 활용해서 더 간편하게 사이트를 사용할 수 있게 한다.
// -> 쿠키 정보는 사용자 컴퓨터의 하드디스크에 텍스트 파일 형태로 최대 300개까지 저장되며, 각 도메인당 50개까지 저장할 수 있고 한 파일의 최대 크기는 4,096 Bytes(약 4KB)이다.
// -> 쿠키에는 웹 사이트뿐만 아니라 접속했던 개인의 정보가 저장되므로 사생활을 침해할 수 있다.
// -> 사이트 간의 교차 스크립트 같은 기법을 통해 쿠키를 악용할 수 있고, 보안 문제가 발생할 수도 있다.
// -> 같은 사이트에서 2개 이상의 탭을 열면 둘 이상의 트랜잭션을 추적하기 어렵다는 단점도 있고, 파일의 크기가 작아서 복잡한 데이터는 저장할 수 없다.
// -> 이런 상황에서 웹 브라우저 창에 직접 데이터를 저장하기 위해 웹 스토리지가 새로 등장했다.

// - 웹 스토리지(Web Storage)
// -> 웹 스토리지의 데이터도 웹 사이트와 관련된 정보를 저장한다.
// -> 쿠키와 다른 점은 사용자가 일부러 스토리지 정보를 서버로 전송하지 않는 이상 서버에서 사용자 PC로 들어와 스토리지 정보를 읽지 못한다는 것이다.
// -> 쿠키 정보는 사이트에서 사용자 정보를 가져가지만 스토리지 정보는 그렇지 않다.
// -> 웹 스토리지는 도메인당 2 ~ 10MB(보통 5MB)의 데이터를 저장할 수 있는데, 이것은 쿠키에 비해 아주 큰 용량이다.

// 5️⃣ 웹 스토리지의 구성
// - 저장하는 데이터의 형태에 따라 세션 스토리지(Session Storage)와 로컬 스토리지(Local Storage)로 나뉜다.

// (1) 세션 스토리지(Session Storage)
// - 웹 브라우저 창(또는 탭)을 여는 순간부터 닫을 때까지를 하나의 세션(Session)이라고 한다.
// - 세션 스토리지는 세션 동안만 데이터를 기억하고 있어서 세션이 끝나면, 즉 웹 브라우저 창이나 탭이 닫히면 데이터를 모두 지워버린다.

// (2) 로컬 스토리지(Local Storage)
// - 세션이 끝나도 계속해서 데이터를 보관하는 스토리지
// - 로컬 스토리지를 이용하면 웹 브라우저 창을 닫았다가 다시 열어도 저장된 데이터를 확인할 수 있다.
// - 웹 스토리지는 '키'와 ;값'으로 구성되고, 필요하면 '키' 값을 사용해 스토리지 안의 정보를 검색할 수 있다.
// - 콘솔창에 다음 명령을 실행하면 Storage 객체의 내용을 볼 수 있다.
// -> 로컬 스트로지나 세션 스토리지는 Storage 객체에서 다루고 있다.
localStorage; // Storage {length: 0} length: 0 [[Prototype]]: Storage

// 6️⃣ Storage 객체의 프로퍼티와 메서드
// - 세션 스토리지와 로컬 스토리지는 Storage 객체 형태로 저장된다.
// - Storage 객체는 sessionStorage 객체와 localStorage 객체를 합쳐서 부르는 용어이다.
// - essionStorage 객체와 localStorage 객체에서 사용하는 프로퍼티와 메서드는 같다.

// (1) length 프로퍼티
// - 스토리지에 몇 개의 키/쌍이 있는지 확인할 수 있다.

// (2) setItem() 메서드
// - 스토리지에 자료를 저장할 때 사용한다.
// - 주어진 키에 키/값 쌍이 있는지 확인하고, 키/값 쌍이 없으면 해당 키(Key)를 만들고 여기에 값(Value)을 저장한다.
// - setItem() 메서드에서 지정한 키가 이미 스토리지에 있다면 기존 값을 새로운 값으로 업데이트 한다.
// setItem(키, 값)

// - 웹 스토리지의 자료는 JSON 형식을 사용한다.
// -> 따라서 스토리지에 자료를 저장할 때는 JSON.stringfy()를 사용해서 JSON으로 변환한 후 저장한다.

// (3) getItem() 메서드
// - 스토리지에 자료가 저장되어 있으면 getItem() 메서드를 사용해서 지정한 키에 해당하는 현재 값을 가져올 수 있다.
// - 만약에 주어진 키에 해당하는 항목이 없으면 null을 반환한다.
// getItem(키)

// - 스토리지의 자료는 JSON 형식이므로, 스토리지에서 가져온 JSON.parse()를 사용해 객체로 변환해서 사용한다.

// (4) key() 메서드
// - 스토리지에 있는 키를 반환한다.
// - 스토리지에 키가 여러 개라면 key() 메서드에서 위치를 지정하고, 해당 위치에 있는 키를 가져온다.
// - 키의 위치는 0부터 시작한다.
// key()
// key(위치)

// (5) removeItem() 메서드
// - 키 이름을 지정하면 스토리지에서 해당 키를 삭제한다.
// - 만약 지정한 키에 해당하는 항목이 없으면 아무것도 하지 않는다.
// removeItem(키)

// (6) clear() 메서드
// - 모든 키/값 쌍을 삭제한다.
// - 만약 스토리지에 항목이 전혀 없으면 아무것도 하지 않는다.
// clear()
