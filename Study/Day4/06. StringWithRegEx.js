// ✏️ 정규 표현식으로 문자열 다루기

// 1️⃣ 정규 표현식 작성하기
// - RegExp 객체를 사용할 수도 있고, 간단히 슬래시(/)를 사용해 표현식으로 사용할 수 있다.
// - 정규 표현식은 '패턴'과 '플래그'로 구성되고, 플래그는 옵션이어서 필요한 경우에만 사용한다.
// - 패턴과 플래그 사이에는 공백이 없다.
// 패턴[플래그]

// (방법1) 슬래시 사용하기
let regexp = /\d{3}/; // 숫자 세 자리

regexp.test("Hello"); // false (test() 함수는 정규 표현식에서 사용하는 메서드이다.)
regexp.test("123"); // true

// (방법2) RegExp 객체 사용하기
let regexp = new RegExp(/\d{3}/);

regexp.test("Hello"); // false
regexp.test("123"); // true

// 2️⃣ 정규 표현식과 메서드
// - RegExp 객체는 test(), exec() 메서드를 제공한다.
// 정규식.text(문자열) : 정규식에 일치하는 부분 문자열이 있으면 true, 없으면 false 반환
// 정규식.exec(문자열) : 정규식에 일치하는 부분 문자열 있으면 결괏값을 배열 형태로, 없으면 null 반환

// - 문자열 메서드 중에서도 정규식과 함께 사용할 수 있는 메서드가 있다.
// match(정규식) : 문자열에서 정규식에 일치하는 부분을 찾는다.
// replace(정규식, 바꿀_문자열) : 문자열에서 정규식에 맞는 부분 문자열을 찾아서 새로운 문자열로 바꾼다.
let str = "ES2015 is powerful";
str.match(/ES6/); // null (정규식 패턴의 문자열에는 큰따옴표가 붙지 않는다. ⚠️)
str.replace(/ES2015/, "ES6");

// 3️⃣ 정규 표현식의 플래그
// - 플래그는 문자열을 검색할 때 사용하는 옵션과 비슷하다.
// i : 영문자의 대소문자를 구별하지 않고 검색
// g : 패턴과 일치하는 것을 모두 검색 (g 플래그가 없을 경우 일치하는 첫 번째 패턴만 반환)
// m : 문자열의 행이 바뀌어도 검색
let str = "ES2015 is powerful";
/es/.test(str); // false
/es/i.test(str); // true

// 4️⃣ 문자 클래스 사용하기
// - 정규식을 사용하면 문자열의 특정 부분이 숫자인지 문자인지 체크할 수 있다. (이것을 '문자 클래스라고 한다.)
// - 숫자와 공백, 단어 등을 체크할 수도 있다.
// \d : 0-9 사이 숫자
// \D : 숫자가 아닌 모든 문자
// \s : 공백, 탭(\t), 줄바꿈(\n) 등
// \S : 공백이 아닌 모든 문자
// \w : 단어에 들어가는 문자 (숫자와 언더바(_) 포함)
// \W : 단어에 들어가지 않는 모든 문자
let str = "ES2015 is powerful";
str.match(/ES\d/); // ['ES2', index: 0, input: 'ES2015 is powerful', groups: undefined]
str.match(/ES\d\d\d\d/); // ['ES2015', index: 0, input: 'ES2015 is powerful', groups: undefined]

// 5️⃣ 문자열의 시작과 끝 체크하기
// - 2가지 앵커 기호(Anchor Sign)을 사용하여 문자열의 시작과 끝 부분을 체크할 수 있다.
// ^ : 문자열의 시작
// $ : 문자열의 끝
let hello = "Hello, everyone.";
/^H/.test(hello); // true (문자열이 H로 시작하는지 체크)
/^h/.test(hello); // false (문자열이 h로 시작하는지 체크)
/one.$/.test(hello); // true (문자열이 one.으로 끝나는지 체크)
/e.$/.test(hello); // true (문자열이 e.으로 끝나는지 체크)
/one$/.test(hello); // false (문자열이 one으로 끝나는지 체크)

// ^ 기호가 [] 안에 있을 경우 NOT의 의미가 된다는 것에 주의한다. ⚠️
"ES2015".match(/[^0-9]/g); // ['E', 'S'] (숫자가 아닌 것을 체크)

// 6️⃣ 반복 검색하기
// 중괄호({})는 반복해서 체크하라고 알려주는 기호이며, 반복 횟수를 지정하거나 최소 반복 횟수, 최대 반복 횟수를 지정할 수 있다.
// 패턴{n} : 패턴이 n번 반복되는 것을 찾는다.
// 패턴{n,} : 패턴이 최소 n번 이상 반복되는 것을 찾는다.
// 패턴{m,n} : 패턴이 최소 m번 이상, 최대 n번 이하 반복되는 것을 찾는다.
let str = "Ooooops";
str.match(/o{2}/); // 'oo' (o가 2번 반복되는 것을 찾아 배열로 반환)
str.match(/o{2,}/); // 'ooo' (o가 2번 이상 반복되는 것을 찾아 배열로 반환)
str.match(/o{2,4}/i); // 'Oooo' (영문자의 대소문자를 구별하지 않고 o가 2번 이상, 4번 이하로 반복되는 것을 찾아 배열로 반환)

// 7️⃣ OR 검색하기
// - | 기호를 사용하여 2개 이상의 패턴을 함께 찾을 수 있다.
let str2 = "ES2015(ES6) is powerful";
let regexp = /ES2015|ES6/; // ES2015 또는 ES6가 있는지 체크한다.
regexp.test(str2); // true

// 8️⃣ 조건에 일치하는 문자열 찾기
// - 정규식은 특정한 의미를 갖는 메타(meta) 문자를 이용해 필요한 조건을 표현한다.
// - 메타 문자를 원래 문자로 사용하려면 백슬래시(\) 다음에 문자를 표시한다.
// [] : 식의 시작과 끝
// ^x : x로 시작하는 문자열 (대괄호([]) 안에 ^가 있으면 NOT의 의미가 된다.)
// x$ : x로 끝나는 문자열
// x+ : x가 1번 이상 반복되는 문자열
// x? : x가 0번 또는 1번 있는 문자열
// x* : x가 0번 이상 반복되는 문자열
// . : 문자 하나

[a-z] // a부터 z까지
^[0-9] // 숫자로 시작하는 것
[^0-9] // 숫자가 아닌 것
e$ // e로 끝나는 것
o+ // o, oo처럼 o가 1번 이상 반복되는 것
x? // y, xy처럼 x가 없거나 한 번 나타나는 것
x* // y, xy, xxy처럼 x가 없거나 여러 번 반복되는 것
[x.z]   // xyz나 xAz처럼 x와 z 사이에 문자가 하나 있는 것

// 9️⃣ 자주 사용하는 정규식
/^[0-9]+$/          // 숫자만 가능
/^[1-9]\d*$/        // 양의 정수
/^\-[1-9]\d*$/      // 음의 정수
/^[a-zA-Z]+$/       // 영문자만 가능
/^[a-zA-Z0-9]+$/    // 숫자와 영문자만 가능
/^[가-힣]+$/        // 숫자만 가능
/^[가-힣a-zA-Z]+$/  // 한글과 영문자만 가능
/^.{5,10}$/         // 길이가 5~10개
/^[a-z0-9_+.-]+@([a-z0-9-]+\.)+[a-z0-9]{2,4}$/    // 메일주소 체크
/(\d{3}).*(\d{3}).*(\d{4})/                       // 전화번호 체크(123-456-7890 또는 123-4567-8901)
/([^\s]+(?=\.(jpg|gif|png))\.\2)/                 // jpg, gif, png 확장자를 가진 그림 파일
/^[1-9]{1}$|^[1-4]{1}[0-9]{1}$|^n$/               // 1부터 n 사이의 번호(1과 n 포함)
/(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}/             // 암호 체크 (최소 영문 소문자 하나와 대문자, 숫자가 각각 1개씩 포함되어 있는 문자열(8글자 이상))